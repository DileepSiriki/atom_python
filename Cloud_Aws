CLOUD INTRO :
===============
  # CLOUD
    It provides us means by which we can access the applications as utilities over the internet.
    It allows us to create, configure, and customize the business applications online
    It provides services over public and private networks/Internet, i.e., WAN, LAN or VPN.

  # CLOUD COMPUTING
    Refers to manipulating, configuring, and accessing the hardware and software resources remotely.
    It offers online data storage, infrastructure, and application.
    It offers platform independency, as the software is not required to be installed locally on the PC.
    Hence, the Cloud Computing is making our business applications mobile and collaborative.
    It can be classified to two types ""
      --> DEPLOYMENT MODELS
        Deployment models define the type of access to the cloud, i.e., how the cloud is located?
        Cloud can have any of the four types of access: PUBLIC, PRIVATE, HYBRID, COMMUNITY.
      --> SERVICE MODELS
        Cloud computing is based on service models : IAAS , PAAS , SAAS.

PUBLIC CLOUD    : Allows systems and services to be easily accessible to the general public.
  (BUS)           Public cloud may be less secure because of its openness. -> CHEAP & LESS SECURE & LOCATION INDEPENDENCE

PRIVATE CLOUD   : Allows systems and services to be accessible within an organization.
  (BIKE)          It is more secured because of its private nature. -> RELIABLE & MORE EFFICIENT & HIGHLY SECURE

HYBRID CLOUD    : Is a mixture of public and private cloud.
  (CAB)           critical activities are performed using private cloud while the non-critical activities are performed using public cloud.

COMMUNITY CLOUD : Allows systems and services to be accessible by a group of organizations.

XAAS : Anything-as-a-Service is yet another service model, which includes :
       Network-as-a-Service, Business-as-a-Service, Identity-as-a-Service, Database-as-a-Service or Strategy-as-a-Service.

IaaS : Infrastructure-as-a-service provides access to fundamental resources such as:
       physical machines, virtual machines, virtual storage, VLAN's, Load balancers, Ip addresses  etc.

PaaS : Platform-as-a-Service provides the runtime environment for applications, development and deployment tools, etc
       It also offers development and deployment tools required to develop applications.
       PaaS provides built-in security, scalability, and web service interfaces.

SaaS : Software-as-a-Service model allows to use software applications as a service to end-users.
       It refers to a software that is deployed on a host service and is accessible via Internet
       Advamtage -> maintained by vendor & upgrades done automatically also not needed to install apps (drive/maps etc)
       Ex : Billing systems , HR Solutions , Help Desk applications.

Identity-as-a-Service -> Single Sign On Server to give users unique credentials and delete when he resigns.
        To solve the problem of using different username and password combinations for different servers, companies now employ Single Sign-On software, which allows the user to login only one time and manage the access to other systems.
        SSO has single authentication server, managing multiple accesses to other systems,

    ### Each of the service models inherit the security and management mechanism from the underlying model ###
                                      ----------------------------------               ==
                                      |       CLOUD CLIENTS            |                 | --> FRONT END
                                      |   Web-Browser    Mobile etc;   |                 |
                                      ----------------------------------               ==
                                                    ^   ^
                                          INTERNET  |   |  INTERNET
                                                    v   v
                            -------------------------------------------------------    ==
      (Applications)        |   SAAS : CRM - Email - Games - Virtual Desktop etc; |      |
                            -------------------------------------------------------      |
                                                      ||                                 |
                            -------------------------------------------------------      |
      (Security , Mngmnt)   |   PAAS : Database - Web Server - Deployment Tools ; |      | --> BACK END
                            -------------------------------------------------------      |
                                                      ||                                 |
                            -------------------------------------------------------      |
      (Services)            |   IAAS : Virtual Machines - Servers - Storage - N/W |      |
      (Most Basic Service)  -------------------------------------------------------    ==

IAAS = H/W ( CPU - RAM - ROM ) + OS (LINUX - WINDOWS)        -----> ADMINISTARTORS
PAAS = IAAS + APP:ICATIONS (Apache - Python - Node JS)       -----> DEVELOPERS
SAAS = PAAS + USER APPS (Gmail  - Drive - O365 - Maps)       -----> EVERYONE
BAAS = SAAS + Buiseness Processing (Accounting - Auditing)


ADVANTAGES OF CLOUD :
=======================
One can access applications as utilities, over the Internet.
One can manipulate and configure the applications online at any time.
It does not require to install a software to access or manipulate cloud application.
Cloud Computing offers online development and deployment tools, programming runtime environment through PaaS model.
Cloud resources are available over the network in a manner that provide platform independent access to any type of clients.
Cloud Computing offers on-demand self-service. The resources can be used without interaction with cloud service provider.
Cloud Computing is highly cost effective because it operates at high efficiency with optimum utilization. It just requires an Internet connection
Cloud Computing offers load balancing that makes it more reliable.

Pay for what we use , cost efficient and load balancing
No server space required
No need of experts to maintain h/w and s/w
better security and disaster recovery
automatic software updates
team collaboration across globe

VIRTUALIZATION :
==================
A technique, which allows to share single physical instance of an application or resource among multiple organizations or tenants (customers).
It does this by assigning a logical name to a physical resource and providing a pointer to that physical resource when demanded.

    APPLICATION virtualization : A single m/c hosts one or more applications delivered to one or more users via internet.
    HARDWARE virtualization    : A physical m/c hosting multiple virtual machines .
    SERVER virtualization      : Used by IAAS .
                                               Virtual Machine -1 = (Applications + OS)
N/W  &  storage --> Virtual Infrastructure --> Virtual Machine -2 = (Applications + OS)
(MAIN MACHINE)                                 Virtual Machine -3 = (Applications + OS)

HOST MACHINE :
===============
The host machine is the physical hardware upon which the virtualization takes place.
This machine runs the virtualization software that allows virtual machines to exist.
Its physical components such as memory, storage, and processor ultimately handle the needs of the virtual machines.
Its physical components such as memory, storage, and processor ultimately handle the needs of the virtual machines.
These resources are typically hidden or masked from the guest machines.

GUEST MACHINE (virtual machine):
================
Virtual machines created from a host machine are called guest machines.
These are supervised by HYPERVISORS .
It emulates, or simulates, a single piece of physical hardware such as a desktop computer or server.
However, everything is passed through the hypervisor, which makes the actual requests to the real hardware.

HYPERVISOR : (Type-1 and Type-2)
==============
It's a software that exists to run, create and manage the virtual machines. It acts as a Virtual Machine Manager (VMM)
VMM, is software that creates and runs virtual machines (VMs).
A hypervisor allows one host computer to support multiple guest VMs by virtually sharing its resources, such as memory and processing.

    Type-1, or bare-metal hypervisors, are installed directly onto the physical hardware.
    As such, they must contain their own operating systems for booting, running the hardware, and connecting to the network.
    Popular Type-1 hypervisors include Microsoft Hyper-V and VMware ESXi.
    Because bare-metal hypervisors are isolated from the attack-prone operating system, they are extremely secure

    Type-2, or hosted hypervisors, run on an operating system that is directly installed on the hardware.
    In this case, a copy of Windows, or a Unix-based system must be installed to boot the system and access the hardware.
    Once the operating system is running, the hosted hypervisor can launch. Type-2 hypervisors are often used to run multiple operating systems on a single machine, rather than to emulate numerous running systems on the hardware.
    Popular Type-2 hypervisors include VMware Workstation, VirtualBox


FIVE PILLARS OF AWS :
=======================
1. OPERATIONAL EXCELLENCE : -> Automation
  Focuses on how you can continuously improve your ability to run systems, create better procedures, and gain insights.
  Human error is the primary cause of defects and operational incidents. The more operations that can be automated, the less chance there is for human error.
    Infrastructure as Code -> process of managing your infrastructure through machine-readable configuration files to automate your infrastructure -> CLOUD FORMATION
    Observability -> Observability is the process of measuring the internal state of your system. This is usually done to optimize it to some desired end state.

2. SECURITY : -> Policies (IAM) , Network Security (VPC) , Encryption (KMS)
  Focuses on how to secure your infrastructure on the cloud. Security and compliance is a shared responsibility between AWS and the customer.
    AWS -> responsible for physical infrastructure, software, and networking capabilities.
    CUSTOMER -> configuration of specific cloud services, the application software, and the management of sensitive data.

3. RELIABILITY :
  Focuses on how you can build services that are resilient to both service and infrastructure disruptions.
    Fault Isolation -> Resource and Request , Availability Zone , Region
    Limits -> Limits are constraints that can be applied to protect your services from excessive load. (SERVICE QUOTAS)

4. PERFORMANCE EFFICIENCY :
  Focuses on how you can run services efficiently and scalably in the cloud to handle any amount of traffic.
    Selection -> Ability to choose the service that most closely aligns with your workload. AWS has the broadest selection of services. (COMPUTE, STORAGE , DB ,N/W)
    Scaling -> VERTICAL : say micro instance to a macro instance (increasing capacity of an instance)
               HORIZONTAL : say 10 instances to 40 instances ( increasing number of instances)

5. COST OPTIMIZATION : -> AWS Cost Explorer ,  AWS Cost & Usage Report
  Focuses on achieving business outcomes while minimizing costs.
  OpEx is an ongoing pay-as-you-go model whereas CapEx is a one-time purchase model.

  AWS - COMMAND LINE INTERFACE :  https://docs.aws.amazon.com/cli/latest/reference/ --> LIST OF COMMANDS
  ===================================
  To generate KEYS , login to that IAM / ROOT -> select account name -> select MY security credentials -> Access keys .
  Access keys : A combination of an access key ID and a secret access key. You can assign two to a user at a time.
                we can generate new ones by deleting old ones.

  Install the AWS-CLI - Version : 2.0
  Once done open WIN -> cmd -> execute aws commands in the Windows Command Line .

  $ aws configure
  AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
  AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  Default region name [None]: us-west-2
  Default output format [None]: json

  $ aws configure list --> list configuration details from (C:\Users\DileepKumar\.aws)
  The AWS CLI stores this information in a profile (a collection of settings) named default in the credentials file
  ~/.aws/credentials
  ~/.aws/config

    ACCESS KEY-ID & SECRET ACCESS KEY :
              Generated while creating a user or afterwards using SECURITY CREDENTIALS tab in USERS.

    REGIONS : US East (Ohio) 	us-east-2
              US East (N. Virginia) 	us-east-1
              US West (N. California) 	us-west-1
              US West (Oregon) 	us-west-2

    OUTPUT : json  – The output is formatted as a JSON
             yaml  – The output is formatted as a YAML
             text  – The output is formatted as multiple lines of tab-separated string values.
                     This can be useful to pass the output to a text processor, like grep, sed, or awk.
             table – The output is formatted as a table using the characters +|- to form the cell borders.
                     It typically presents the information in a "human-friendly" format that is much easier to read than the others, but not as programmatically useful.

    PROFILE : A collection of settings is called a profile. By default, the AWS CLI uses the default profile.
              You can create and use additional named profiles with varying credentials and settings by specifying the --profile option and assigning a name.

            $ aws configure --profile produser
            AWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLE
            AWS Secret Access Key [None]: je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY
            Default region name [None]: us-east-1
            Default output format [None]: text

            When you create using profile , the files in C:\Users\DileepKumar\.aws change as :
              cred file :     [default]
                              aws_access_key_id = AKIAXK7QGYUTLRNF7QGK
                              aws_secret_access_key = <secret-access-key> #deleted to push this page into github
                              [admin]
                              aws_access_key_id = AKIAXK7QGYUTLRNF7QGK
                              aws_secret_access_key = <secret-access-key>  #deleted to push this page into github

              config file : [default]
                            region = us-east-1
                            output = table
                            [profile admin]
                            region = us-east-1
                            output = table

              This file keeps on updating upon providing profiles and we can use the profile name as alias for a particular user  in future.
              To use a named profile, add the --profile profile-name option to your command .
              EX: $ aws ec2 describe-instances --profile user1 (to list ec2 instances for user1)
              To make a profile as default : WINDOWS : setx AWS_PROFILE  user1  (set for that particular shell & setx if for all shells)
                                             LINUX   : export AWS_PROFILE=user1

             aws configure get/set <> --profile <> --> get/set values
             aws configure import --csv file://credentials.csv
             aws configure list
             aws configure list-profiles
             aws iam list-users -> list all IAM users.
             aws --version
             aws sts get-caller-Identity -> Details about the User - ID , keys and URL to login


    HELP : aws help
           aws command help
           aws command subcommand help --> aws ec2 describe-instances help | more

           If any command returns errors , then use the --debug flag to see logs
           Use --debug option to see the debug logs for each step in a AWS command.

          Do "setx aws_cli_auto_prompt on (WINDOWS)" or "export aws_cli_auto_prompt=on (LINUX)"
            --> Press the <Enter> key to start autocomplete mode .
            --> Use <Space Bar> to move from command to subcommand and then to options etc;
            --> use <Arrow Keys> to navigate up and down
            --> Once done , use <Enter> key to execute the command .

    RETURN CODE :
        A hidden code sent after running a AWS Command Line Interface (AWS CLI) command which describes the status of the command.
        C:\> echo %errorlevel% --> WINDOWS
        $ echo $? -> LINUX
        0

        CODE 0 : The command completed successfully. There were no errors generated by the AWS CLI and AWS service the request was sent to.
   	    CODE 1 : (Only for S3) One or more Amazon S3 transfer operations failed.
    	  CODE 2 : Applicable to all CLI commands – the command entered couldn't be parsed. Parsing failures can be caused by, but aren't limited to, missing required subcommands or arguments, or using unknown commands or arguments.
                 Limited to S3 commands – One or more files marked for transfer were skipped during the transfer process. However, all other files marked for transfer were successfully transferred. Files that are skipped during the transfer process include: files that don't exist; files that are character special devices, block special device, FIFO queues, or sockets; and files that the user doesn't have read permissions to.

Tasks that require root user credentials:
  1. To change account details - email , name , root user password , root user access keys .
  2. View Tax info (unless billing IAM is created)
  3. Close your AWS ACCOUNT
  4. Change AWS support plans

AWS IDENTITY AND ACCESS MANAGEMENT : (IAM)
==========================================
AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources.
You use IAM to control who is authenticated (signed in) and authorized (has permissions)to use resources.
  -> Share access to your account without sharing your credentials
  -> Provide granular permissions to either an ec2 or S3 (to both users and tools)
  -> Also use MFA along with credential-
  -> Temporary creds to users using federations and Cross Account access

         -------------------------------------------------------------------------
        |                    |--> Group ADMINISTARTORS  --> user1, user2          |
        | ROOT ACCOUNT --->  |--> Group DEVELOPERS      --> user3                 |
        |                    |--> Group TESTERS         --> user4, user5, us      |
         -------------------------------------------------------------------------

       PASSWORD POLICIES :
          Go to IAM -> Left section -> Account Settings -> Password Policies (edit / create / delete)
          First we need to attach password poliy to IAM Admin to give him access to update password Policies.

GROUP :
--------
        Group is a collection of users who have similar responsibilities.
        Each group has multiple users. Each user can be in more than one group,
        You can't put groups inside other groups. You use policies to grant permissions to groups.

USERS :
----------
        An IAM user is an entity that you create in AWS.
        The IAM user represents the person or service who uses the IAM user to interact with AWS.
        A primary use for IAM users is to give people the ability to sign in to the AWS Management Console for interactive tasks and to make programmatic requests to AWS services using the API or CLI
        A user in AWS consists of a name, a password to sign into the AWS Management Console, and up to two access keys that can be used with the API or CLI
        To rename a user we can use only CLI . But we can delete from console and CLI as well.
        If the user has a permissions boundary, then you cannot add more permissions/policies to a user thanare allowed by the permissions boundary

POLICIES :
-----------
        IDENTITY-BASED Policies are permissions policies that you attach to an IAM identity, such as an IAM user, group, or role.

            MANAGED POLICIES : Control what actions the identity can perform, on which resources, and under what conditions.
                      AWS MANAGED      --> Default policies in AWS
                      CUSTOMER MANAGED --> Customer Created by editing fields in Aws Policies.

            INLINE POLICIES  : Policies that you create and manage and that are embedded directly into a single user, group, or role.
                                 Used when you want to assign a policy directly to a single user.

        RESOURCE-BASED Policies are permissions policies that you attach to a resource such as an  Amazon S3 bucket or an IAM role trust policy.

         A policy once created , can be attached to either a USER or a GROUP or a ROLE!!
         Go to -> policies -> select the policy (click the circle on left) -> policy actions (on top) -> attach -> Select User/group to add .
         OR -> Select user/group -> Permissions -> Attach Policy .
         We use ARN of roles in policies to have effect to that particular role.

ROLES :
-----------
        An IAM role is very similar to a user, in that it is an identity with permission policies that determine what the identity can and cannot do in AWS.
        However, a role does not have any credentials (password or access keys) associated with it.
        Instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.
        An IAM role is an AWS Identity and Access Management (IAM) entity with permissions to make AWS service requests.
        IAM roles cannot make direct requests to AWS services;
        They are meant to be assumed by authorized entities, such as IAM users, applications, or AWS services such as EC2.

            Roles can be used by the following:
            • An IAM user in the same AWS account as the role
            • An IAM user in a different AWS account than the role
            • A web service offered by AWS such as Amazon Elastic Compute Cloud (Amazon EC2)
            • An external user authenticated by an external identity provider (IdP) service that is compatible with SAML 2.0 or OpenID Connect, or a custom-built identity broker.

         Delegation involves setting up a trust between two accounts.
           The first is the account that owns the resource (the trusting account).
           The second is the account that contains the users that need to access the resource(the trusted account).
           The trusted and trusting accounts can be any of the following:
              • The same account.
              • Separate accounts that are both under your organization's control.
              • Two accounts owned by different organizations.

        Federation  involves Creation of a trust relationship between an external identity provider and AWS.
        Users can signin to a web identity provider, such as Login with Amazon, Facebook, Google, or any IdP that iscompatible with OpenID Connect (OIDC).

SWITCHING ROLES : (click on account name and at the bottom , find "CHANGE ROLE")
------------------------------------------------------------------------------------
      You cannot switch to a role when you are signed in as the AWS account root user.
      We need to SWITCH ROLES to get those permissions defined in the role.
      Switching roles using the AWS Management Console works only with accounts that do not require an ExternalId.
      For example, assume that you grant access to your account to a third party and require an ExternalId in a Condition element in your permissions policy. In thatcase, the third party can access your account only by using the AWS API or a command line tool.The third party cannot use the console because it cannot supply a value for ExternalId
        There are two ways that David can use to enter the Switch Role page:
            • David receives a link from his administrator that points to a pre-defined Switch Role configuration.
              The link is provided to the administrator on the final page of the Create role wizard or on the Role Summary page for a cross-account role.
              Choosing this link takes David to the Switch Role page with the Account ID and Role name fields already filled in.
              All David needs to do is choose Switch Role and he's done.
            • The administrator does not send the link in email, but instead sends the Account ID number and Role Name values.
              David must manually type them to switch roles.
     ASSUME ROLE : (AWS API)When David needs to make an update to the Production account from code, he makes an AssumeRolecall to assume the UpdateApp role.
     The call returns temporary credentials that he can use to access the productionapp bucket in the Production account.
     With those credentials, David can make API calls to update the production app bucket.

TEMPORARY CREDS IN IAM :
--------------------------
      Temporary credentials are primarily used with IAM roles, but there are also other uses.
      You can request temporary credentials that have a more restricted set of permissions than your standard IAM user.
      This prevents you from accidentally performing tasks that are not permitted by the more restricted credentials.
      A benefit of temporary credentials is that they expire automatically after a set period of time.
      You have control over the duration that the credentials are valid.

         When to create an IAM user (instead of a role):
           You created an AWS account and you're the only person who works in your account.
           Other people in your group need to work in your AWS account, and your group is using no other identity mechanism.

         When to create an IAM role (instead of a user):
           You're creating an application that runs on an Amazon Elastic Compute Cloud (Amazon EC2) instance and that application makes requests to AWS.
           You're creating an app that runs on a mobile phone and that makes requests to AWS.

TAGS :
-------
    IAM tags are key-value pairs you can add to your user.
    Tags can include user information, such as an email address, or can be descriptive, such as a job title.
    You can use the tags to organize, track, or control access for this user
    Tag key–value pairs are not case sensitive, but case is preserved. This means that you cannothave separate Department and department tag keys.
    If you have tagged a user with the Department=foo tag and you add the department=bar tag, it replaces the first tag. A second tag isnot added.
     • You cannot create a tag key or value that begins with the text aws:. This tag prefix is reserved for AWSinternal use.
     • You can create a tag with an empty value such as phoneNumber = . You cannot create an empty tagkey.


ARN : AMAZOAN RESOURCE NAMES
------------------------------
    Amazon Resource Names (ARNs) uniquely identify AWS resources.
    We require an ARN when you need to specify a resource unambiguously across all of AWS, such as in IAM policies, Amazon Relational Database Service (Amazon RDS) tags, and API calls.
    Click on users/groups/roles -> click on the particular entry you want ARN -> we find ARN in the summery (TOP)

    arn:partition:service:region:account-id:resource-id
    arn:partition:service:region:account-id:resource-type/resource-id
    arn:partition:service:region:account-id:resource-type:resource-id

    PARTITION   == The partition in which the resource is located -> aws , aws-cn (china)
    SERVICE     == The service namespace that identifies the AWS product. For example, s3 for Amazon S3 resources.
    PARTITION   == The Region. For example, us-east-2 for US East (Ohio).
    ACCOUNT-ID  == The ID of the AWS account that owns the resource, without the hyphens. For example, 123456789012.
    RESOURCE-ID == The resource identifier. This part of the ARN can be the name or ID of the resource or a resource path.
                   For example, user/Bob for an IAM user or instance/i-1234567890abcdef0 for an EC2 instance.
                   Some resource identifiers include a parent resource (sub-resource-type/parent-resource/sub-resource) or a qualifier such as a version (resource-type:resource-name:qualifier).
    PATHS-IN-ARN : Resource ARNs can include a path. For example, in Amazon S3, the resource identifier is an object name that can include slashes (/) to form a path. Similarly, IAM user names and group names can include paths.
          If you are writing an IAM policy, you can specify all IAM users that have the path product_1234 using a wildcard as follows:
          arn:aws:iam::123456789012:user/Development/product_1234/*

          You can specify user/* to mean all users or group/* to mean all groups, as in the following examples:
          "Resource":"arn:aws:iam::123456789012:user/*"
          "Resource":"arn:aws:iam::123456789012:group/*"
 ALIASES :
 -----------
    Your AWS account can have only one alias. If you create a new alias for your AWS account, the new alias overwrites the previous alias, and the URL containing the previous alias stops working.•
    The account alias must be unique across all Amazon Web Services products. It must contain only digits, lowercase letters, and hyphens.

    FROM : https://Your_Account_ID.signin.aws.amazon.com/console TO : https://Your_Account_Alias.signin.aws.amazon.com/consol


MFA : MULTI FACTOR AUTHENTICATION
---------------------------------
    Go to -> account name -> My security credential-> MFA -> Assign MFA -> [Virtual app - Token - U2F Device]
    Download Google Authenticator -> scan -> enter OTP twice -> Authenticate


AWS - EC2 (AMAZON ELASTIC COMPUTE CLOUD)
==========================================
It provides scalable computing capacity in the Amazon WebServices (AWS) Cloud.
Using Amazon EC2 eliminates your need to invest in hardware up front, so you can develop and deploy applications faster.
You can use Amazon EC2 to launch as many or as few virtual servers as you need, configure security and networking, and manage storage.

  •Virtual computing environments, known as instances
  •Preconfigured templates for your instances, known as Amazon Machine Images (AMIs), that package the bits you need for your server (including the operating system and additional software)
  •Various configurations of CPU, memory, storage, and networking capacity for your instances, known as instance types
  •Secure login information for your instances using key pairs (AWS stores the public key, and you store the private key in a secure place)
  •Storage volumes for temporary data that's deleted when you stop, hibernate, or terminate your instance, known as instance store volumes
  •Persistent storage volumes for your data using Amazon Elastic Block Store (Amazon EBS), known as Amazon EBS volumes
  •Multiple physical locations for your resources, such as instances and Amazon EBS volumes, known as Regions and Availability Zones
  •A firewall that enables you to specify the protocols, ports, and source IP ranges that can reach your instances using security groups
  •Static IPv4 addresses for dynamic cloud computing, known as Elastic IP addresses
  •Metadata, known as tags, that you can create and assign to your Amazon EC2 resources
  •Virtual networks you can create that are logically isolated from the rest of the AWS Cloud, and that you can optionally connect to your own network, known as virtual private clouds (VPCs)

To automatically distribute incoming application traffic across multiple instances, use Elastic Load Balancing.
To get a managed relational database in the cloud, use Amazon Relational Database Service.
To make it easier to manage Docker containers on a cluster of EC2 instances, use Amazon ElasticContainer Service (Amazon ECS).
To monitor basic statistics for your instances and Amazon EBS volumes, use Amazon CloudWatch.
Amazon EC2 supports creating resources using AWS CloudFormation. You create a template, in JSON or YAML, that describes your AWS resources, and AWS CloudFormation provisions and configures those resources for you.

TYPES OF INSTANCES :
---------------------
  ONDEMAND  : Pay for the instances that you use by the second, with no long-term commitments or upfront payments.
  SAVINGS   : You can reduce your Amazon EC2 costs by making a commitment to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years.
  RESERVED  : You can reduce your Amazon EC2 costs by making a commitment to a specific instance configuration, including instance type and Region, for a term of 1 or 3 years.
  SPOT      : Request unused EC2 instances, which can reduce your Amazon EC2 costs significantly.

INSTANCES :
------------
Is a virtual server in the cloud. Its configuration at launch is a copy of the AMI that you specified when you launched the instance.
An instance type essentially determines the hardware of the host computer used for your instance.
Each instance type offers different compute and memory capabilities. Select an instance type based on the amount of memory and computing power that you need for the application or software that you plan to run on the instanc
Your AWS account has a limit on the number of instances that you can have running.

    STORAGE :
    ----------
    --> The root device for your instance contains the image used to boot the instance.

    --> Your instance may include local storage volumes, known as instance store volumes, which you can configure at launch time with block device mapping.
        One these are mapped to our instance , we can use them to mount and use . The data is lost if the instance fails (stopped or terminated).
        So this is used for temporary data . We can overcome this by REPLICATION or using AMAZON S3 or EBS Volumes.

    STOP & TERMINATE :
    -------------------
    --> STOP :
        When an instance is stopped, the instance performs a normal shutdown, and then transitions to a stopped state.
        All of its Amazon EBS volumes remain attached, and you can start the instance again at a later time.
        When an instance is in a stopped state, you can attach or detach Amazon EBS volumes. You can also create an AMI from the instance, and you can change the kernel, RAM disk, and instance type.

    --> TERMINATE :
        hen an instance is terminated, the instance performs a normal shutdown.
        The root device volume is deleted by default, but any attached Amazon EBS volumes are preserved by default.
        The instance itself is also deleted, and you can't start the instance again at a later time.
        To prevent accidental termination  ensure that the disableApiTermination attribute is set to true for the instance.

REZIONS AND ZONES : open EC2 -> move to bottom -> SERVICE HEALTH & ZONE STATUS
----------------------------------------------------------------------------------
Amazon EC2 is hosted in multiple locations world-wide. These locations are composed of Regions, Availability Zones, Local Zones, AWS Outposts, and Wavelength Zones.

    • Each Region is a separate geographic area.
      Each Amazon EC2 Region is designed to be isolated from the other Amazon EC2 Regions. This achieves the greatest possible fault tolerance and stability.
      When you view your resources, you see only the resources that are tied to the Region that you specified. This is because Regions are isolated from each other, and we don't automatically replicate resources across Regions.

    • Availability Zones are multiple, isolated locations within each Region. Each Region has multiple, isolated locations known as Availability Zones.
      An Availability Zone is represented by a Region code followed by a letter identifier; for example,us-east-1a --> AZ ID is unique for all accounts but us-east-1a might not be same for all.
      When you launch an instance, you can select an Availability Zone or let us choose one for you.
      If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests.
      You can also use Elastic IP addresses to mask the failure of an instance in one Availability Zone by rapidly remapping the address to an instance in another Availability Zone.
      we can also migrate instances to another AZ --> make an AMI --> launch an instance --> configure

    • Local Zones provide you the ability to place resources, such as compute and storage, in multiple locations closer to your end users.
      Local Zones have their own connections to the internet and support AWS Direct Connect, so that resources created in aLocal Zone can serve local users with low-latency communications.
      A Local Zone is represented by a Region code followed by an identifier that indicates the location, for example, us-west-2-lax-1a
      We need to enable them in order to use , then create a subnet .

    • AWS Outposts is a fully managed service that extends AWS infrastructure, services, APIs, and tools to customer premises.
      By providing local access to AWS managed infrastructure, AWS Outposts enables customers to build and run applications on premises using the same programming interfaces as in AWSRegions, while using local compute and storage resources for lower latency and local data processing needs.


    • Wavelength Zones allow developers to build applications that deliver ultra-low latencies to 5G devices and end users. Wavelength deploys standard AWS compute and storage services to the edge of telecommunication carriers' 5G networks.
      A Wavelength Zone is represented by a Region code followed by an identifier that indicates the Wavelength Zone, for example, us-east-1-wl1-bos-wlz-1.


EC2 ROOT DEVICE VOLUME : [ AMIs backed by Amazon EC2 instance store (OLDER) <===> AMIs backed by Amazon EBS.(LATEST) ]
-------------------------
    INSTANCE STRORE BACKED INSTANCES : (Do not support the Stop action)  --> Template stored in Amazon S3
        Instances that use instance stores for the root device automatically have one or more instance store volumes available, with one volume serving as the root device volume.
        When an instance is launched, the image that is used to boot the instance is copied to the root volume.
        Any data on the instance store volumes persists as long as the instance is running, but this data is deleted when the instance is terminated

        INSTANCE = [Instance store volume-1] + [Instance store volume-2] + [Instance store volume-3] etc;
          root volume = one of the Instance store volume , which gets a copy of image when instance is booted from S3.

                   [                    HOST - COMPUTER                      ]
          [S3] --> [ [ Instance-store  (vol-1) (vol-2)... ] [Device Mapping] ]  -> No EBS , so a failure will delete everything.
            v                              ^
            |____lOADES AMI ->_____________|

    EBS BACKED INSTANCES :
        An Amazon EBS-backed instance can be stopped and later restarted without affecting data stored in the attached volumes.
        There are various instance– and volume-related tasks you can do when an Amazon EBS-backed instance is in a stopped state.
        For example, you can modify the properties of the instance, change its size, or update the kernel it is using, or you can attach your root volume to a different running instance for debugging
              By default, the root volume for an AMI backed by Amazon EBS is deleted when the instance terminates.
              You can change the default behaviour to ensure that the volume persists after the instance terminates.
              To change the default behaviour, set the DeleteOnTermination attribute to false using a block device mapping.
              --> Deselect DELETE ON TERMINATION option while creating Instance
              --> For an already existing instance this can be done only from CLI.

                                                [                    HOST - COMPUTER                      ]
          [(EBS_vol-1) (EBS_vol-2) .... ] <---> [ [ Instance-store (vol-1) (vol-2) ... ] [Device Mapping] ] -> EBS is independent and hence fail proof.

        RECOVERY UPON FAILURE :
              1.Create a snapshot of the root volume.
              2.Register a new AMI using the snapshot.
              3.Launch a new instance from the new AMI.
              4.Detach the remaining Amazon EBS volumes from the old instance.
              5.Reattach the Amazon EBS volumes to the new instance.

       Instances launched from an Amazon EBS-backed AMI launch faster than instances launched from an instance store-backed AMI.
       When you launch an instance from an instance store-backed AMI, all the parts have to be retrieved from Amazon S3 before the instance is available.
       With an Amazon EBS-backed AMI, only the parts required to boot the instance need to be retrieved from the snapshot before the instance is available.

-->You can convert an instance store-backed Linux AMI that you own to an Amazon EBS-backed Linux AMI.
   You can't convert an instance store-backed Windows AMI to an Amazon EBS-backed Windows AMI and you cannot convert an AMI that you do not own.

AMAZON MACHIENE IMAGE : AMI
-----------------------------
It is a template that contains a software configuration (for example, an operating system, an application server, and applications)
From an AMI, you launch an instance, which is a copy of the AMI running as a virtual server in the cloud. You can also launch multiple instances of an AMI.
Your instances keep running until you stop, hibernate, or terminate them, or until they fail.
You can also create your own custom AMI or AMIs; doing so enables you to quickly and easily start new instances that have everything you need.
      For example, if your application is a website or a web service, your AMI could include a web server, the associated static content, and the code for the dynamic pages.
      As a result, after you launch an instance from this AMI, your web server starts, and your application is ready to accept requests

--> An AMI includes the following:
   • One or more Amazon Elastic Block Store (Amazon EBS) snapshots, or,
        for instance-store-backed AMIs,a template for the root volume of the instance (for example, an operating system, an applicationserver, and applications).
   • Launch permissions that control which AWS accounts can use the AMI to launch instances.
   • A block device mapping that specifies the volumes to attach to the instance when it's launched.

--> CUSTOM AMI :
      You can launch an instance from an existing AMI, customize the instance (for example, install software on the instance), and then save this updated configuration as a custom AMI.
      Instances launched from this new custom AMI include the customizations that you made when you created the AMI.

-->AMIs that are backed by Amazon EBS snapshots can take advantage of Amazon EBS encryption.
   Snapshots of both data and root volumes can be encrypted and attached to an AMI.

INSTANCE PURCHASING OPTIONS :
------------------------------
•On-Demand Instances – Pay, by the second, for the instances that you launch.
      You pay for compute capacity by the second with no long-term commitments. You have full control over its lifecycle—you decide when to launch, stop, hibernate, start, reboot, or terminate it.
      The price per second for a running On-Demand Instance is fixed.
      Recommends that you use On-Demand Instances for applications with short-term, irregular workloads that cannot be interrupted.
      You can request a limit increase for each On-Demand Instance limit type from the Limits page or the vCPU limits calculator in the Amazon EC2 console

•Reserved Instances – Reduce your Amazon EC2 costs by making a commitment to a consistent instance configuration, including instance type and Region, for a term of 1 or 3 years.
      You can purchase a Reserved Instance for a one-year or three-year commitment, with the three-year commitment offering a bigger discount.
      Reserved Instances do not renew automatically; when they expire, you can continue using the EC2instance without interruption, but you are charged On-Demand rates.
      In nav bar (left) -> find option "RESERVED INSTANCES"

•Spot Instances – Request unused EC2 instances, which can reduce your Amazon EC2 costs significantly.
      A Spot Instance is an unused EC2 instance that is available for less than the On-Demand price.
      Because Spot Instances enable you to request unused EC2 instances at steep discounts, you can lower your Amazon EC2 costs significantly.
      The hourly price for a Spot Instance is called a Spot price. The Spot price of each instance type in each Availability Zone is set by Amazon EC2, and is adjusted gradually based on the long-term supply of and demand for Spot Instances.
      Your Spot Instance runs whenever capacity is available and the maximum price per hour for your request exceeds the Spot price.
      Amazon EC2 terminates, stops, or hibernates your Spot Instance when the Spot price exceeds the maximum price for your request or capacity is no longer available.
      Amazon EC2 provides a Spot Instance interruption notice, which gives the instance a two-minute warning before it is interrupted.
      Spot Instances with a defined duration (also known as Spot blocks) are designed not to be interrupted and will run continuously for the duration you select.
      This makes them ideal for jobs that take a finite time to complete, such as batch processing, encoding and rendering, modeling and analysis, and continuous integration.
      You can use a duration of 1, 2, 3, 4, 5, or 6 hour.

      In nav bar (left) -> find option "SPOT INSTANCES"
      To launch , similar steps -> launch-> select AMI (step-1) -> Type (step-2) -> configure Instance (step-3) -> here tick purchasing options (Request spot instances)

•Dedicated Hosts – Pay for a physical host that is fully dedicated to running your instances, and bring your existing per-socket, per-core, or per-VM software licenses to reduce costs.
•Dedicated Instances – Pay, by the hour, for instances that run on single-tenant hardware.

                                         Dedicated Host                                                Dedicated Instance
  --------------------------------------------------------------------------------------------------------------------------------------
    Billing                              Per-host billing                                              Per-instance billing

    Visibility of sockets,               Provides visibility of the number of                          No visibility
    cores, and host                      sockets and physical cores

    Host and instance affinity           Allows you to consistently deploy your                        Not supported
                                         instances to the same physical server over time

    Automatic instance recovery          Supported                                                     Supported

    Bring your OWN licenses              Supported                                                     Not   Supported
    BYOL
  ---------------------------------------------------------------------------------------------------------------------------------------

•Capacity Reservations – Reserve capacity for your EC2 instances in a specific Availability Zone for any duration.
      This gives you the ability to create and manage Capacity Reservations independently from the billing discounts offered by Savings Plans or regional Reserved Instances.
      By creating Capacity Reservations, you ensure that you always have access to EC2 capacity when you need it, for as long as you need it
      Your On-Demand Instance limits per Region apply.

LIFECYCLE :
--------------
An On-Demand Instance runs when you launch it and ends when you terminate it.
A Spot Instance runs as long as capacity is available and your maximum price is higher than the Spot price.
      On the Details tab, under Instance details, find Lifecycle.
          If the value is spot, the instance is a Spot Instance.
          If the value is normal, the instance is either an On-Demand Instance or a Reserved Instance.
      On the Details tab, under Host and placement group, find Tenancy.
          If the value is host, the instance is running on a Dedicated Host.
          If the value is dedicated, the instance is a Dedicated Instance.

CONNECTING TO A LINUX INSTANCE :
---------------------------------
#### We can launch instances from : LAUNCH TEMPLATES , PARAMETERS FROM AN EXISTING INSTANCE , AWS CLI , WINDOWS POWERSHELL , EC2 FLEET as well .
#### An EC2 Fleet contains the configuration information to launch a fleet—or group—of instances. In a singleAPI call, a fleet can launch multiple instance types across multiple Availability Zones, using the On-Demand Instance, Reserved Instance, and Spot Instance purchasing options together.

--> In EC2 dashboard --> Instances --> top right Launch Instances -> select free tier eligible --> Security group (pre create a SG and attach - check below steps INBOUND RULES , as by default inbound is not allowed )

--> A Linux instance has no password; you use a key pair to log in to your instance securely.
    You specify the name of the key pair when you launch your instance, then provide the private key when you log in using SSH.
    You can use the same keypair on multiple instances and you can also use multiple keypairs on the same user on an instance.

--> When you ssh into a Linux instance, you supply a username and the private half of a keypair.
    The Linux system will look in the nominated user's .ssh/authorized_keypairs file and will attempt to find the matching public half of the keypair.
    If found, it will allow you to start the ssh session. Therefore, any keypair can be added to a user's .ssh/authorized_keys file.
    It can include multiple keypairs, all of which would be permitted to login as that user.
    When you launch an instance, its initial state is pending. After the instance starts, its state changes to running and it receives a public DNS name.

--> File format
      pem -- For use with OpenSSH
      ppk -- For use with PuTTY
      chmod 400 my-key-pair.pem -> change permissions so that only you can see it .

--> If your local computer operating system is Linux or macOS X
      •SSH client
      •EC2 Instance Connect
      •AWS Systems Manager Session Manager

--> If your local computer operating system is Windows
      •PuTTY ( free SSH client for Windows)
      •SSH client
      •AWS Systems Manager Session Manager
      •Windows Subsystem for Linux (p. 620)

--> Get information about your instance
    --> Default USER NAMES :
        •For Amazon Linux 2 or the Amazon Linux AMI, the user name is ec2-user.
        •For a CentOS AMI, the user name is centos.
        •For a Debian AMI, the user name is admin.
        •For a Fedora AMI, the user name is ec2-user or fedora.
        •For a RHEL AMI, the user name is ec2-user or root.
        •For a SUSE AMI, the user name is ec2-user or root.
        •For an Ubuntu AMI, the user name is ubuntu.

--> Enable inbound traffic to your instance
    --> Ensure that the security group associated with your instance allows incoming SSH traffic from your IP address.
        The default security group for the VPC does not allow incoming SSH traffic by default.
        Security groups are specific to aRegion, so you should select the same Region in which you created your key pair.
        Inbound rules -> http & https --> 0.0.0.0/0 and ::/0
                         ssh -> My-Ip or do a custom and add IP using CIDR notation
   --> In security group selection , select both DEFAULT and the one you have created (check below details for rules before going next.)
   If already created -> EC2 -> select instance -> security -> security groups -> select a group -> edit (add/delete)

--> Locate the private key
    --> chmod 400 my-key-pair.pem -> change permissions so that only you can see it .

--> ONCE EVERYTHING IS SET-UP : Directly click on CONNECT
    -> EC2 Instant Connect : Connecting in web browser directly .
    -> Session Manager (SSM agent)
    -> SSH client

--> CONNECT USING SSH :
        1. check that SSH Client (Openssh) is installed
        2. open WINDOWS+R -> cmd
        3. ssh -i "C:\Users\DileepKumar\Desktop\AWS_keys\linux-ec2.pem" ec2-user@ec2-18-216-19-72.us-east-2.compute.amazonaws.com

--> CONNECT USING PUTTY :
        1. Download Latest putty version -> putty + putty Key Gen
        2. Convert your private key using PuTTYgen : (Skip if you already have key in ppk format)
              PuTTY does not natively support the private key format for SSH keys.
              PuTTY provides a tool namedPuTTYgen, which converts keys to the required format for PuTTY.
              You must convert your private key(.pem file) into this format (.ppk file)
        3. STEP A : Type of key to generate : RSA
           STEP B : Chose load , by default it shows only ppk files . change to (.* all files)
           STEP C : click save private key .
                     PuTTYgen displays a warning about saving the key without a passphrase. Choose Yes.
                     A passphrase on a private key is an extra layer of protection.
                     Even if your private key is discovered, it can't be used without the passphrase. T
                     The downside to using a pass phrase is that it makes automation harder because human intervention is needed to log on to an instance.
           STEP D : Save he .ppk file with the same name as of .pem file in a secure location .
        4. Now connect using PUTTY
           STEP A : Start PuTTY (from the Start menu, choose All Programs, PuTTY, PuTTY).
           STEP B : In the Category pane, choose Session and complete the following fields:
                    --> In the Host Name box, do one of the following :
                        •(Public DNS) To connect using your instance's public DNS name, enter my-instance-user-name@my-instance-public-dns-name.
                        •(IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance'sIPv6 address, enter my-instance-user-name@my-instance-IPv6-address.
                    --> DO NOT forget to add "user-name@" before "DNS" name . #ec2-user@ec2-18-188-73-18.us-east-2.compute.amazonaws.com
                    --> Ensure that the Port value is 22.
                    --> Under Connection type, select SSH.
           STEP C : (Optional) You can configure PuTTY to automatically send 'keepalive' data at regular intervals to keep the session active.
                    This is useful to avoid disconnecting from your instance due to session inactivity.
                    In the Category pane, choose Connection, and then enter the required interval in the Seconds between keepalives field.
                    For example, if your session disconnects after 10 minutes of inactivity, enter 180 to configure PuTTY to send keepalive data every 3 minutes.
           STEP D : In the Category pane, expand Connection, expand SSH, and then choose Auth. Complete the following:
                    --> Choose Browser
                    --> Select the .ppk file that you generated for your key pair and choose Open
                    --> (Optional) If you plan to start this session again later, you can save the session information for future use.
                        Under Category, choose Session, enter a name for the session in Saved Sessions, and then choose Save.
                    --> Choose Open.
           STEP E : If this is the first time you have connected to this instance, PuTTY displays a security alert dialog box that asks whether you trust the host to which you are connecting.
                    --> (Optional) Verify that the fingerprint in the security alert dialog box matches the fingerprint that you previously obtained .
                        If these fingerprints don't match, someone might be attempting a "man-in-the-middle" attack. If they match, continue to the next step
                    --> Choose Yes. A window opens and you are connected to your instance.

--> CONNECT USING SESSION MANAGER :
          Session Manager is a fully managed AWS Systems Manager capability that lets you manage your AmazonEC2 instances through an interactive one-click browser-based shell or through the AWS CLI.
          You can use Session Manager to start a session with an instance in your account.
          After the session is started, you can run bash commands as you would through any other connection type.
          ///ly for WSL -> download , copy private key to WSL , do an ssh command to connect .


CONNECTING TO A WINDOWS INSTANCE :
---------------------------------
Similar to LINUX but we need exta RDP instead of ssh :
  --> Choose HTTP from the Type list, and make sure that Source is set to Anywhere (0.0.0.0/0).
  --> Choose HTTPS from the Type list, and make sure that Source is set to Anywhere(0.0.0.0/0).
  --> Choose RDP from the Type list. In the Source box, choose My IP to automatically populate the field with the public IPv4 address of your local computer.
  Alternatively, choose Custom and specify the public IPv4 address of your computer or network in CIDR notation.
  To specify an individual IP address in CIDR notation, add the routing suffix /32, for example,203.0.113.25/32.
  If your company allocates addresses from a range, specify the entire range, such as 203.0.113.0/24.

To connect to a Windows instance, you must retrieve the initial administrator password and then specify this password when you connect to your instance using Remote Desktop.
It takes a few minutes after instance launch before this password is available.
The name of the administrator account depends on the language of the operating system. For example,for English, it's Administrator, for French it's Administrateur, and for Portuguese it's Administrador.

Once we click CONNECT :
  --> Session Manager
  --> RDP CLIENT
      --> We can see the password here // Below -> CLICK on GET-PASSWORD
      --> This takes us to another page -> BROWSE and provide the key file we have downloaded.
      --> Alternatively we can also copy paste the contents of key file .
      --> Click DECRYPT Password --> Password gets visible
      --> Save the Username & password from that page in a safe place. You need this password to connect to the instance.
      --> Alternatively we can create it every time we want to connect using above steps.
      --> Choose Download remote desktop file. Provide the Password upon opening the RDP.


START AND STOP INSTANCES :
---------------------------
  START & STOP : --> EBS  volume persists but RAM memory is lost , retains IP & ELASTIC IP addresses.
    You can stop and start your instance if it has an Amazon EBS volume as its root device (Not Instance store based instances) --> retains instance ID .
    While the instance is stopped, you can treat its root volume like any other volume, and modify it (for example, repair file system problems or update software).
    You just detach the volume from the stopped instance, attach it to a running instance, make your changes, detach it from the running instance, and then reattach it to the stopped instance.
    Make sure that you reattach it using the storage device name that's specified as the root device in the block device mapping for the instance.

  TERMINATE :
    If you decide that you no longer need an instance, you can terminate it.

  HIBERNATION : --> You can't enable or disable hibernation for an instance after you launch it. , enable in configuration setting while launching.
     Not all instances support Hybernation .
     Hibernation saves the contents from the instance memory (RAM) to your Amazon Elastic Block Store (Amazon EBS) root volume.
     •The EBS root volume is restored to its previous state
     •The RAM contents are reloaded
     •The processes that were previously running on the instance are resumed
     •Previously attached data volumes are reattached and the instance retains its instance ID.

  REBOOT :
    An instance reboot is equivalent to an operating system reboot. In most cases, it takes only a few minutes to reboot your instance.
    When you reboot an instance, it keeps its public DNS name (IPv4),private IPv4 address, IPv6 address (if applicable), and any data on its instance store volumes
    We might schedule your instance for a reboot for necessary maintenance, such as to apply updates that require a reboot
    Select the instance and choose Actions, Instance state, Reboot instance.

  RETIREMENT :
    An instance is scheduled to be retired when AWS detects irreparable failure of the underlying hardware that hosts the instance.
    When an instance reaches its scheduled retirement date, it is stopped or terminated by AWS.
    If your instance is scheduled for retirement, you receive an email prior to the event with the instanceID and retirement date.

CLOUD WATCH ALARMS : --> Select the instance --> choose Actions -->Monitor and troubleshoot --> Manage CloudWatch alarms.
------------------------       Alternatively, you can choose the plus sign ( + ) in the Alarm status column.

Using Amazon CloudWatch alarm actions, you can create alarms that automatically stop, terminate, reboot, or recover your instances.
You can use the stop or terminate actions to help you save money when you no longer need an instance to be running.
You can use the reboot and recover actions to automatically reboot those instances or recover them onto new hardware if a system impairment occurs.
You can add the stop, terminate, reboot, or recover actions to any alarm that is set on an Amazon EC2per-instance metric.
We need to pre create an SNS Topic to recieve notification.
--> we can make alarms to do the following : STOP - TERMINATE - REBOOT - RECOVER

NETWORKING IN EC2 :
----------------------
Amazon EC2 and Amazon VPC support both the IPv4 and IPv6 addressing protocols. --> Default is IPv4
When you create a VPC, you must specify an IPv4 CIDR block (a range of private IPv4 addresses).
You can optionally assign an IPv6 CIDR block to your VPC and subnets, and assign IPv6 addresses from that block to instances in your subnet.

  PRIVATE IPV4 - INTERNAL DNS : (By default IP is assigned)
        A private IPv4 address is an IP address that's not reachable over the Internet.
        You can use private IPv4addresses for communication between instances in the same VPC.
        we can't resolve the internal DNS hostname outside of the VPC.
        An instance receives a primary private IP address from the IPv4 address range of the subnet.
        Each instance has a default network interface (eth0) that is assigned the primary privateIPv4 address.
        You can also specify additional private IPv4 addresses, known as secondary private IPv4addresses.
        Unlike primary private IP addresses, secondary private IP addresses can be reassigned from one instance to another.
        A private IPv4 address, regardless of whether it is a primary or secondary address, remains associated with the network interface when the instance is stopped and started, or hibernated and started, and is released when the instance is terminated.

  PUBLIC IPV4 - EXTERNAL DNS : (If Default VPC is used -> Assigned , If Non-Default VPC is used -> Not assigned)
  #### PUBLIC IP addressing is available only during launch .
  #### So to alter this , we can use ELASTIC IP after launch and associate or disassociate accordingly.

        A public IP address is an IPv4 address that's reachable from the Internet.
        You can use public addresses for communication between your instances and the Internet.
        We resolve an external DNS hostname to the public IP address of the instance from outside its VPC, and to the private IPv4 address of the instance from inside its VPC.
        The public IP address is mapped to the primary private IP address through network address translation (NAT).

        When you launch an instance in a default VPC, we assign it a public IP address by default.
        When you launch an instance into a nondefault VPC, the subnet has an attribute that determines whether instances launched into that subnet receive a public IP address from the public IPv4 address pool.
        By default, we don't assign a public IP address to instances launched in a nondefault subnet.
        You can control whether your instance receives a public IP address as follows:
            • FOR NON-DEFAULT  : Modifying the public IP addressing attribute of your subnet. ( https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#subnet-public-ip )
            • FOR DEFAULT      : Enabling or disabling the public IP addressing feature during launch, which overrides the subnet's public IP addressing attribute
                --> launch -> select -> in CONFIGURE INSTANCE -> Auto-assign Public IP -> enable/disable

        You cannot manually associate or disassociate a public IP address from your instance after launch. But it is released when :
            --> Instance is stopped, hibernated, or terminated. Your stopped or hibernated instance receives a new public IP address when it is started.
            --> Instance is associated with an Elastic IP address with it. When you disassociate the Elastic IP address from your instance, it receives a new public IP address.
            --> Instance's public IP address is released while it has a secondary private IP address that is associated with an Elastic IP address, the instance does not receive a new public IP address

        So if you require a persistent public IP address that can be associated to and from instances as you require, use an Elastic IP address instead.
        To assign additional public IPv4 addresses to an instance, you must allocate Elastic IP addresses and associate them with the instance or its network interfaces.

        When you add a second network interface, the system can no longer auto-assign a publicIPv4 address.
        You will not be able to connect to the instance over IPv4 unless you assign an Elastic IP address to the primary network interface (eth0).
        You can assign the Elastic IPaddress after you complete the Launch

  ELASTIC IP ADDRESS - IPV4:
        An Elastic IP address is a public IPv4 address that you can allocate to your account.
        You can associate it to and disassociate it from instances as you require. It's allocated to your account until you choose to release it.
        AWS do not support Elastic IP addresses for IPv6.
        The public IP addressing feature is only available during launch.
        However, whether you assign a publicIP address to your instance during launch or not, you can associate an Elastic IP address with your instance after it's launched

  IPV6 ADDRESSES :
        If your VPC and subnet have IPv6 CIDR blocks associated with them, you can assign an IPv6 address to your instance during or after launch.
        You can optionally associate an IPv6 CIDR block with your VPC, and associate IPv6 CIDR blocks with your subnets.
        The IPv6 CIDR block for your VPC is automatically assigned from Amazon's pool of IPv6addresses. you cannot choose the range yourself.
        AWS  do not support IPv6 DNS hostnames for your instance.
        To  give an instance a public IP6
              --> launch -> select -> in CONFIGURE INSTANCE -> Auto-assign IPV6 -> enable/disable
        IPV6 is assigned to your instance if :
          •Your subnet is configured to automatically assign an IPv6 address to an instance during launch.
          •You assign an IPv6 address to your instance during launch.
          •You assign an IPv6 address to the primary network interface of your instance after launch.
          •You assign an IPv6 address to a network interface in the same subnet, and attach the network interface to your instance after launch
       You can assign additional IPv6 addresses to your instance by assigning them to a network interface attached to your instance.

 MULTIPLE IP ADDRESSES :
 #### You can assign multiple IPV4/IPV6 addresses To a single network interface eth0 or You can add a device and add IP's
 #### We can do this while launching -> launch -> configure Instance -> below Network Interfaces -> add device
 #### or after launching Instance  -> select ec2 -> instance -> actions -> networking -> manage Ip adresses .
        •Host multiple websites on a single server by using multiple SSL certificates on a single server and associating each certificate with a specific IP address.
        •Operate network appliances, such as firewalls or load balancers, that have multiple IP addresses for each network interface.
        •Redirect internal traffic to a standby instance in case your instance fails, by reassigning the secondary IP address to the standby instance.
        •You can assign a secondary private IPv4 address to any network interface. The network interface need not be attached to the instance .
        •You can assign multiple IPv6 addresses to a network interface that's in a subnet that has an associatedIPv6 CIDR block.

          -> launch -> configure Instance -> below Network Interfaces -> add device
          When you add a second network interface, the system can no longer auto-assign a publicIPv4 address.
          You will not be able to connect to the instance over IPv4 unless you assign an Elastic IP address to the primary network interface (eth0).
          You can assign the Elastic IP address after you complete the Launch .

 ELASTIC IP ADDRESSES :( public IPv4 address) -> EC2 -> nav panel -> Elastic IP's [-> Actions -> associate/disassociate/Release etc;]
    By default, all AWS accounts are limited to five (5) Elastic IP addresses per Region, because public (IPv4)internet addresses are a scarce public resource.
    An Elastic IP address is a static(it does not change over time) IPv4 address designed for dynamic cloud computing.
    By using an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account.
    you are not charged for one Elastic IP address associated with the instance when the instance is running but charged for a stopped instance or an unattached network interface.
    When you associate an Elastic IP address with an instance, it is also associated with the instance's primary network interface.
    When you associate an Elastic IP address with a network interface that is attached to an instance, it is also associated with the instance.
    When you associate an Elastic IP address with an instance or its primary network interface, the instance's public IPv4 address (if it had one) is released back into Amazon's pool of public IPv4addresses.
    A disassociated Elastic IP address remains allocated to your account until you explicitly release it.
    When you associate an Elastic IP address with an instance that previously had a public IPv4 address, the public DNS host name of the instance changes to match the Elastic IP address.

NETWORK INTERFACES :
    Each instance has a default network interface, called the primary network interface.
    You cannot detach a primary network interface from an instance. You can create and attach additional network interfaces.
    If you have an Elastic IP address, you can associate it with one of the private IPv4 addresses for the network interface. You can associate one Elastic IP address with each private IPv4 address.

 EC2-CLASSIC :
    With EC2-Classic, your instances run in a single, flat network that you share with other customers.
    With Amazon VPC, your instances run in a virtual private cloud (VPC) that's logically isolated to your AWS account.
    The EC2-Classic platform was introduced in the original release of Amazon EC2. If you created your AWS account after 2013-12-04, it does not support EC2-Classic, so you must launch your Amazon EC2instances in a VPC

 SECURITY GROUPS :
    The rules of a security group control the inbound traffic that's allowed to reach the instances that are associated with the security group.
    The rules also control the outbound traffic that's allowed to leave them.
    •By default, security groups allow all outbound traffic.
    •Security group rules are always permissive; you can't create rules that deny access.
    •Security group rules enable you to filter traffic based on protocols and port numbers.
    •You can add and remove rules at any time. Your changes are automatically applied to the instances that are associated with the security group.
    •When you associate multiple security groups with an instance, the rules from each security groupare effectively aggregated to create one set of rules

STORAGE EC2 :
---------------
  AMAZON EBS :
    Amazon EBS provides durable, block-level storage volumes that you can attach to a running instance.
    You can use Amazon EBS as a primary storage device for data that requires frequent and granular updates.
    For example, Amazon EBS is the recommended storage option when you run a database on an instance.
    An EBS volume behaves like a raw, unformatted, external block device that you can attach to a single instance but  multiple volumes can be attached to an instance.
    The volume persists independently from the running life of an instance.
    You can also detach and attach EBS from one instance to other.
    Regularly back up your EBS volumes using Amazon EBS snapshots , and create an Amazon Machine Image (AMI) from your instance to save the configuration as a template forlaunching future instances.


    •Solid state drives (SSD)  — Optimized for transactional workloads involving frequent read/write operations with small I/O size, where the dominant performance attribute is IOPS.
    •Hard disk drives (HDD) — Optimized for large streaming workloads where the dominant performance attribute is throughput.
    •Previous generation  — Hard disk drives that can be used for workloads with small data sets where data is accessed infrequently and performance is not of primary importance.

  AMAZON INSTANCE STORE :
    Many instances can access storage from disks that are physically attached to the host computer.
    This disk storage is referred to as instance store. Instance store provides temporary block-level storage for instances.
    The data on an instance store volume persists only during the life of the associated instance ;if you stop, hibernate, or terminate an instance, any data on instance store volumes is lost

  AMAZON EFS : (File System)
    Amazon EFS provides scalable file storage for use with Amazon EC2.
    You can create an EFS file system and configure your instances to mount the file system.
    You can use an EFS file system as a common data source for workloads and applications running on multiple instances.

  AMAZON S3 :
    Amazon S3 provides access to reliable and inexpensive data storage infrastructure.
    It is designed to make web-scale computing easier by enabling you to store and retrieve any amount of data, at any time, from within Amazon EC2 or anywhere on the web.
    For example, you can use Amazon S3 to store backup copies of your data and applications.
    Amazon EC2 uses Amazon S3 to store EBS snapshots and instance store-backed AMIs.

  ROOT STORAGE :
    Every time you launch an instance from an AMI, a root storage device is created for that instance.
    The root storage device contains all the information necessary to boot the instance.
    You can specify storage volumes in addition to the root device volume when you create an AMI or launch an instance using block device mapping

  SNAPSHOTS : EC2 -> EBS -> Snapshots -> create
  Snapshots are incremental backups, which means that only the blocks on the device that have changed after your most recent snapshot are saved.
  This minimizes the time required to create the snapshot and saves on storage costs by not duplicating data.
  you can copy it from one AWS Region to another, or within the same Region. -> Snapshots -> Actions -> copy
  Amazon S3server-side encryption (256-bit AES) protects a snapshot's data in transit during a copy operation
  Regularly back up your EBS volumes using Amazon EBS snapshots , and create an Amazon Machine Image (AMI) from your instance to save the configuration as a template forlaunching future instances.
