
VERSION CONTROL SYSYTEMS : Is a software that helps software developers to work together and maintain a complete history of their work.

  Local Version Control Systems (RCS) : Stores versions of each file separately .
  Centralized Version Control Systems : Depends on a central server , To collaborate with developers on other systems. Single point of failure and database corruptions .
  Distributed Version Control Systems : clients don’t just check out the latest snapshot of the files: they fully mirror the repository.
      Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data

GIT :
=====
The major diference between Git and any other VCS is the way Git thinks about its data.
Conceptually, most other systems store information as a list of file-based changes.
These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.

But in GIT gvery time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
To be eficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.
Git thinks about its data more like a stream of snapshots.

The mechanism that Git uses for this checksumming is called a SHA-1 hash.
This is a 40-character string composed of hexadecimal characters (0–9 and a–f)
calculated based on the contents of a file or directory structure in Git. A
SHA-1 hash looks something like this: 24b9da6552252987aa493b52f8696cd6d3b00373
Git stores everything in its database not by file name but by the hash value of its contents.

    • Speed and integrity (can not change anything without git knowing about it )
    • Simple design using commands
    • Strong support for non-linear development (thousands of parallel branches)
    • Fully distributed
    • Able to handle large projects like the Linux kernel efficiently

FILE STRUCTURE :
================
GIT DIRECTORY : is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

WORKING DIRECtory : is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify

STAGING AREA : is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
It’s sometimes referred to as the “index”, but it’s also common to refer to it as the staging area

WORKFLOW :
==========
1. You modify files in your working directory.
2. You stage the files, adding snapshots of them to your staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it’s considered committed.
If it has been modified and was added to the staging area, it is staged. And
if it was changed since it was checked out but has not been staged, it is modified.

Git uses a series of configuration files to determine nondefault behaviour that you may want.
Each of these “levels” (system, global, local) overwrites values in the previous level, so values in .git/config trump those in /etc/gitconfig, for instance.

  The first place Git looks for these values is in an /etc/gitconfig file, which contains values for every user on the system and all of their repositories.
  If you pass the option --system to git config, it reads and writes from this file specifically.

  The next place Git looks is the ~/.gitconfig (or ~/.config/git/config) file, which is specific to each user.
  You can make Git read and write to this file by passing the --global option.

  Finally, Git looks for configuration values in the configuration file in the Git directory (.git/config) of whatever repository you’re currently using.
  These values are specific to that single repository.

$ git config --global user.name "esrkdlp"
$ git config --global user.email dileep.siriki@ericsson.com
$ git config --list -> to list all configuration settings

GIT HELP :
==========
$ git help <verb>
$ git <verb> --help
$ man git-<verb>

GIT TERMINOLOGIES :
====================
Blobs : Blob stands for Binary Large Object. Each version of a file is represented by blob. A blob holds the file data but doesn’t contain any metadata about the file. It is a binary file, and in Git database, it is named as SHA1 hash of that file. In Git, files are not addressed by names. Everything is content-addressed.
Trees : Tree is an object, which represents a directory. It holds blobs as well as other sub-directories. A tree is a binary file that stores references to blobs and trees which are also named as SHA1 hash of the tree object.
Commits : Commit holds the current state of the repository. A commit is also named by SHA1 hash. You can consider a commit object as a node of the linked list. Every commit object has a pointer to the parent commit object. From a given commit, you can traverse back by looking at the parent pointer to view the history of the commit. If a commit has multiple parent commits, then that particular commit has been created by merging two branches.
Branches : Branches are used to create another line of development. By default, Git has a master branch, which is same as trunk in Subversion. Usually, a branch is created to work on a new feature. Once the feature is completed, it is merged back with the master branch and we delete the branch. Every branch is referenced by HEAD, which points to the latest commit in the branch. Whenever you make a commit, HEAD is updated with the latest commit.
Tags : Tag assigns a meaningful name with a specific version in the repository. Tags are very similar to branches, but the difference is that tags are immutable. It means, tag is a branch, which nobody intends to modify. Once a tag is created for a particular commit, even if you create a new commit, it will not be updated. Usually, developers create tags for product releases.
Clone : Clone operation creates the instance of the repository. Clone operation not only checks out the working copy, but it also mirrors the complete repository. Users can perform many operations with this local repository. The only time networking gets involved is when the repository instances are being synchronized.
Pull ; Pull operation copies the changes from a remote repository instance to a local one. The pull operation is used for synchronization between two repository instances. This is same as the update operation in Subversion.
Push : Push operation copies changes from a local repository instance to a remote one. This is used to store the changes permanently into the Git repository. This is same as the commit operation in Subversion.
HEAD : HEAD is a pointer, which always points to the latest commit in the branch. Whenever you make a commit, HEAD is updated with the latest commit. The heads of the branches are stored in .git/refs/heads/ directory.
       It is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch.
       That means HEAD will be the parent of the next commit that is created.
       It’s generally simplest to think of HEAD as the snapshot of your last commit.
       HEAD~ = Parent of HEAD

[CentOS]$ ls -1 .git/refs/heads/
master
[CentOS]$ cat .git/refs/heads/master
570837e7d58fa4bccd86cb575d884502188b0c49

Revision : Revision represents the version of the source code. Revisions in Git are represented by commits. These commits are identified by SHA1 secure hashes.
URL : URL represents the location of the Git repository. Git URL is stored in config file.

Tracked files : are files that were in the last snapshot; they can be unmodified, modified, or staged.
Untracked files : are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven’t edited anything

SHA1: The SHA-1 digest is 20 bytes or 160 bits
Git is smart enough to figure out what commit you meant to type if you provide the first few characters,
as long as your partial SHA-1 is at least four characters long and unambiguous – that is, only one object in the current repository begins with that partial SHA-1.
  ex: git show <40chars> = git show <20chars> = git show <4chars>


GIT LOG :
==========
git log           -> show commit history in the current branch
git log --oneline -> single line prints
git log -p        -> To view commit history and also the changes introduced
git log --pretty=format:"%h - %an, %ar : %s" -> (sha -  author name - date - message)

a<-b<-c<-d<-e<----(master)
    \f<-g<-h<---(branch)

    DOUBLE DOT :
      git log master..<branch(master)> -> commits that are reachable from branch but not from master.
          Here it is f and g and h
      git log <branch(master)>..master -> commits that are reachable from master but not from branch..
          Here it is c and d and e
      git log origin/master..HEAD
           to see what you’re about to push to a remote

    SINGLE BRANCH COMPARISON :
      git log refA..refB
      git log ^refA refB
      git log refB --not refA

    MULTIPLE BRANCH COMPARISON : (-> seeing what commits are in any of several branches that aren’t in the branch you’re currently on.)
      git log refA refB ^refC
      git log refA refB --not refC

    TRIPLE DOT : commits that are reachable by either of two references but not by both of them
      git log master...<branch(master)


GIT REFLOG :
============
“git reflog” – a log of where your HEAD and branch references have been for the last few months.
If you want to see the fith prior value of the HEAD of your repository, you can use the @{n} reference that you see in the reflog output


GIT DIFF :
=-=========
git show <commit-ID/SHA> -> to see the changes made
git diff      -> For a tracked file -> To see what you’ve changed but not yet staged.
                 compares what is in your working directory with what is in your staging area.
                 It doesn’t show all changes made since your last commit – only changes that are still unstaged.
git difftool  -> open a GUI session to see changes.
Do a "git log " and 'git show' before pushing , pulling , commiting atc;
Do a 'git pull' before a "git push" to sync the local repository with the remote

GIT Stash :
==============
In Git, the stash operation takes your modified tracked files, stages changes, and saves them on a stack of unfinished changes that you can reapply at any time.
git stash -> to stash the working directory and staged changes
git stash list -> to list all stashes
git stash pop -> execute the git stash pop command, to remove the changes from the stack and place them in the current working directory.
 git stash apply stash@{2} -> unstash 2nd stash (by default 1st one without any option)


GIT REMOVE/MOVE :
===================
git rm <file> -> deletes from tracked files are and once committed , it is gone from next time . then do commit and push to reflect changes .
git mv <source> <destination> -> To RENAME / MOVE files , once done we need to commit and push the changes to remote
                                 This is equalent to : 1-> mv <source> <destination>
                                                       2-> git rm <source>
                                                       3-> git add <destination>
git push origin --delete <remote-branch> -> Delete a remote branches

GIT RESET : ( *** Page 289 in GIT ***)
================
git reset --soft -> just resets the HEAD pointer to previous commit and does not change anything
git reset --mixed -> reverts those changes from the staging area that have not been committed yet. It reverts the changes from the staging area only. The actual changes made to the working copy of the file are unaffected. The default Git reset is equivalent to the git reset -- mixed.
git reset --hard  -> it will clear the staging area; it will reset the HEAD pointer to the latest commit of the specific commit ID and delete the local file changes too.

STEP 1: MOVE HEAD (GIT RESET --SOFT HEAD~)
The first thing reset will do is move what HEAD points to.
This isn’t the same  as changing HEAD itself (which is what checkout does);  reset moves the branch that HEAD is pointing to.
This means if HEAD is set to the master branch (i.e. you’re currently on the master branch),
running "git reset 9e5e6a4" will start by making master point to 9e5e6a4.
  git reset --soft HEAD~ <===> git commit --amend
  (Both moves the HEAD to the previous commit then we can do changes and do another commit)
THIS WILL NOT UNSTAGE THE FILES .

STEP 2: UPDATING THE INDEX (DEFAULT RESET) (GIT RESET --MIXED HEAD~)
Note that if you run git status now you’ll see in green the diference between the Index and what the new HEAD is.
The next thing reset will do is to update the Index with the contents of whatever snapshot HEAD now points to.
It still undid your last commit, but also unstaged everything.  You rolled back to before you ran all your git add and git commit commands.
THIS WILL UNSTAGE EVERYTHING.

STEP 3: UPDATING THE WORKING DIRECTORY (GIT RESET --HARD HEAD~)
The third thing that reset will do is to make the Working Directory look like the Index.
Any other invocation of reset can be pretty easily undone, but the --hard option cannot, since it forcibly overwrites files in the Working Directory
CHNAGES THE WORKING DIRECTORY AS WELL

  HEAD = pointer to latest commit , INDEX = staging area
  1. Move the branch HEAD points to (stop here if --soft)
  2. Make the Index look like HEAD (stop here unless --hard)
  3. Make the Working Directory look like the Index

GIT RESET vs GIT CHECKOUT : (***fig 7.19 in book )
===========================
1. Unlike reset --hard, checkout is working-directory safe; it will check to make sure it’s not blowing away files that have changes to them.
  Actually, it’s a bit smarter than that – it tries to do a trivial merge in the Working Directory, so all of the files you haven’t changed in will be updated.
  reset -- hard, on the other hand, will simply replace everything across the board without checking.

2. reset will move the branch that HEAD points to, checkout will move HEAD itself to point to another branch .
  say we have master and develop branches which point at different commits, and we’re currently on develop (so HEAD points to it).
  If we run git reset master, develop itself will now point to the same commit that master does.
  If we instead run git checkout master, develop does not move, HEAD itself does. HEAD will now point to master

The “HEAD” column reads “REF” if that command moves the reference (branch) that HEAD  points to, and “HEAD” if it moves HEAD itself

                                  HEAD         Index         Workdir         WD-Safe?
  COMMIT LEVEL
  reset --soft [commit]            REF          NO              NO               YES
  reset [commit]                   REF          YES             NO               YES
  reset --hard [commit]            REF          YES             YES              NO
  checkout [commit]                HEAD         YES             YES              YES

  FILE LEVEL
  reset (commit) [file]            NO           YES             NO               YES
  checkout (commit) [file]         NO           YES             YES              NO



GIT TAGGING :
================
Tag operation allows giving meaningful names to a specific version in the repository.
git tag -a '<AlIAS>' -m '<Message>' <Commit-Id
Now do : git push origin tag <alias>
git tag -l -> list Tags
git tag -d <alias> -> remove Tags

GIT REMOTE :
===============
git remote add <alias> <url> -> to add remote repository.
git remote -v -> list remote repositories
git remote rm <alias> -> remove remote
git remote rename <old> <new>
Remote branches take the form of (remote)/(branch) as in origin/master

GIT TAGGING :
===============
Git uses two main types of tags: lightweight and annotated.

A lightweight tag is very much like a branch that doesn’t change – it’s just a pointer to a specific commit.
git tag <tag>

Annotated tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, email, and date; have a tagging message
git tag -a <tag> -m "message"

git list               -> list Tags
git show <tag>         -> show info about a tag
git push origin <tag>  -> push a tag to server
git push origin --tags -> push all tags to server
git checkout -b <branch> <tag> -> we cannot checkut to tags but can create a branch and checkout to that branch having data of a tag.

GIT ALIAS :
==============
$ git config --global alias.co checkout -> git co = git checkout
$ git config --global alias.br branch   -> git br = git Branch
$ git config --global alias.ci commit
$ git config --global alias.st status

$ git config --global alias.last 'log -1 HEAD'
$ git last = git log -1 HEAD


GIT COMMIT :
=================
git commit -m "commit message"
git commit --amend -m "<new commit message>" -> to change the previous commit and not create a new commit
gitk -> gitk is a graphical history viewer.
        Think of it like a powerful GUI shell over git log and git grep.
        This is the tool to use when you’re trying to find something that happened in the past, or visualize your project’s history .
        most useful is the --all flag, which tells gitk to show commits reachable from any ref, not just HEAD. 


Git doesn’t store data as a series of change sets or differences, but instead as a series of snapshots.
When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged
This object also contains the author’s name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents):
  zero parents for the initial commit, o
  ne parent for a normal commit, and
  multiple parents for a commit that results from a merge of two or more branches.

EXAMPLE :
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'

When you create the commit by running git commit, Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository.
Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.
Your Git repository now contains five objects:
    one blob for the contents of each of your three files,
    one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and
    one commit with the pointer to that root tree and all the commit metadata.

                                                                    5b1d3
INITIAL COMMIT ->                                      blob                        size
                                                       Testing library....
                                                /      contains code about ...
                                              /
     98ce56                  92ec2                                  76tg0
COMMIT     SIZE           TREE  SIZE                  blob                        size
tree       92ec2          blob  5b1d3 README          MTM license ..
author     scott  --->    blob  76tg0 LICENSE  ----   use of unauthorized ...
committer  scott          blob  e34vg test.rb         written by Dileep ...
[<commit message>]
                                              \                     e34vg
                                                \     blobs                       size
                                                      #include<stdio.h>
                                                      int 3,4;
                                                      print("My name is :")

FROM THE NEXT COMMIT ->

     98ce56                            32bhu7                                  90ju78
COMMIT     SIZE                    COMMIT     SIZE                        COMMIT     SIZE
tree       92ec2                   tree       92ec2                       tree       92ec2
parent      -          <----       parent     98ce56       <----          parent      32bhu7
author     scott                   author     scott                       author     scott
committer  scott                   committer  scott                       committer  scott
[<commit message>]                 [<COMMIT MESSAGE>]                     [<COMMIT MESSAGE>]
       |                                   |                                      |
       V                                   V                                      V
  SnapShot-1                         SnapShot-2                              SnapShot-3


GIT BRANCHING :
=================
Branch operation allows creating another line of development.
we can use this operation to fork off the development process into two different directions.
A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is MASTER.
As you start making commits, you’re given a master branch that points to the last commit you made.
Every time you commit, it moves forward automatically.

When you checkout a branch,
    1. it changes HEAD to point to the new branch ref,
    2. populates your Index with the snapshot of that commit,
    3. then copies the contents of the Index into your Working Directory.


git branch <branch-name> ->  creates a branch
git branch -> list Branches
git checkout <branch-name> ->  move to branch
git checkout -b <branch-name> -> create a branch and move into it.
git branch -m <old> <new> -> Rename a branches
git branch -v -> To see the last commits in all branches
git branch --merged
git branch --no-merged -> check branches not merged as of now

A branch can be deleted by providing –D option with git branch command.
But before deleting the existing branch, switch to the other branch.
git branch -D <branch-name>
git branch -d <branch-name> -> makes sure that a merge is done so that the complete code is available in master
git push origin <branch> -> to push to remote
git push origin --delete <remote-branch> -> Delete a remote branches

In Git, there is a pointer to the local branch you’re currently on -> heads

1. git branch Testing                                             2. git checkout Testing
  (creates a branch pointing to latest commit)                       (HEAD pointer moves to testing branch)

                        HEAD                                                     MASTER
                          |                                                         |
                        MASTER                                23rt56 <- 456tgy <- 7yug8
                          |                                                         |
    23rt56 <- 456tgy <- 7yug8                                                    Testing
                          |                                                         |
                       Testing                                                    HEAD


3. echo "Code is used to test CPP nodes " >> README
   git add .
   git checkout -m "updated README"
   (A new commit moves HEAD and Testing to the new commit , leaving MASTER as it is )

                   MASTER
                     |
23rt56 <- 456tgy <- 7yug8 <- 945gh3
                               |
                            Testing
                               |
                              HEAD

4. git checkout master
   (It’s important to note that when you switch branches in Git, files in your working directory will change.
   If you switch to an older branch, your working directory will be reverted to look like it did the last time you
   committed on that branch)

                     HEAD
                      |
                    MASTER
                      |
23rt56 <- 456tgy <- 7yug8 <- 945gh3
                                |
                             Testing

5. git checkout master
   git merge testing
   git branch -D testing

GIT MERGE :
===============
Git merge will combine multiple sequences of commits into one unified history.
In the most frequent use cases, git merge is used to combine two branches. The commands  merge into the current branch.
The current branch will be updated to reflect the merge, but the target branch will be completely unaffected.

a-b-c-d             a-b-c-d------\_I (new merge commit)
   \e-f-g-h            \g-f-g-h--/

When creating a merge commit Git will attempt to auto magically merge the separate histories for you.
If Git encounters a piece of data that is changed in both histories it will be unable to automatically combine them.
This scenario is a version control conflict and Git will need user intervention to continue.
git merge --abort -> to abort a merge if there are conflicts

  BEFORE DOING A MERGE :
    Execute git status to ensure that HEAD is pointing to the correct merge-receiving branch.
    If needed, execute git checkout to switch to the receiving branch.
    Make sure the receiving branch and the merging branch are up-to-date with the latest remote changes.
    Execute git fetch to pull the latest remote commits.
    Once the fetch is completed ensure the master branch has the latest updates by executing git pull.
    git fetch
    git pull
    git merge <branch>

  Fast-Forward_merge : linear paths and no new commit is generated .
      when you try to merge one commit with a commit that can be reached by following the first commit’s history,
      Git simplifies things by moving the pointer forward because there is no divergent work to merge together

  3-way merge : creates a new commit
      Instead of just moving the branch pointer forward,
      Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
      This is referred to as a merge commit, and is special in that it has more than one parent.


  GIT MERGE CONFLICTS : (git mergetool -> GUI tool)
  ======================
  When you encounter a merge conflict, running the git status command shows you which files need to be resolved .
  Once you've identified conflicting sections, you can go in and fix up the merge to your liking.
  When you're ready to finish the merge, all you have to do is run git add on the conflicted file(s) to tell Git they're resolved.
  Then, you run a normal git commit to generate the merge commit.
  Note that merge conflicts will only occur in the event of a 3-way merge. It’s not possible to have conflicting changes in a fast-forward merge


GIT REBASE :
==============
https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase
https://www.atlassian.com/git/tutorials/merging-vs-rebasing
-> rebasing is like saying, “I want to base my changes on what everybody has already done.”
You have two options for integrating your feature into the master branch: merging directly or rebasing and then merging.
    The former option results in a 3-way merge and a merge commit,
    while the latter results in a fast-forward merge and a perfectly linear history.


The Git rebase command is a branch merge command, but the difference is that it modifies the order of commits.

The Git merge command tries to put the commits from other branches on top of the HEAD of the current local branch.
For example, your local branch has commits A−>B−>C−>D and the merge branch has commits A−>B−>X−>Y,
then git merge will convert the current local branch to something like A−>B−>C−>D−>X−>Y

The Git rebase command tries to find out the common ancestor between the current local branch and the merge branch.
It then pushes the commits to the local branch by modifying the order of commits in the current local branch.
For example, if your local branch has commits A−>B−>C−>D and the merge branch has commits A−>B−>X−>Y,
then Git rebase will convert the current local branch to something like A−>B−>X−>Y−>C−>D.

GIT CLEAN :
============
it’s designed to remove files from your working directory that are not tracked.
If you change your mind, there is often no retrieving the content of those files.
A safer option is to run git stash --all to remove everything but save it in a stash
the git clean command will only remove untracked files that are not ignored.
Any file that matches a pattern in your .gitignore or other ignore files will not be removed. use "-x" to remove them.

git clean -n -> to see what would be deleted (do it before doing a real delete)
git clean -i -> interactive clean
git clean -d -> recursive delete the directories as well
git clean -x -> Also delete files specified in .gitignore file
git clean -X -> Only remove files specified in .gitignore . Useful to remove files generated by a build and then do a new rebuild but keeping the manually created files intact .

GIT GREP :
===========
git grep -n <snippet> -> show line numbers and paths
git log -<snippet> --oneline -> does the same
git log -L :<snippet>:<file> -> to see all changes done to that snippet in a file from beginning

GIT BLAME :
===========
It shows you what commit was the last to modify each line of any file.
So, if you see that a method in your code is buggy, you can annotate the file with git blame to see when each line of the method was last edited and by whom.
This example uses the -L option to limit the output to lines 12 through 22:
  git blame -L 12,22 simplegit.rb

GIT HOOKS :
===========
Git has a way to fire of custom scripts when certain important actions occur.
Example scripts in .git/hooks
There are two groups of these hooks:
  client-side : triggered by operations such as committing and merging
  server-side : run on network operations such as receiving pushed commits

GIT REFLOG: (.git/logs)
===========
As you’re working, Git silently records what your HEAD is every time you change it.
Each time you commit or change branches, the reflog is updated.
The reflog is also updated by the git update-ref command, which is another reason to use it instead of just writing the SHA-1 value to your ref files,

If we did a "git reset --hard" and want to fetch the lost commits , use "git reflog" to list the history of HEAD moments .
Then do a "git branch <branch-name> <required SHA from reflog output>"

===================================================================================================
===================================================================================================
GIT INTERNALS :
===================================================================================================
===================================================================================================
==> Files in .git folder :

The description file is only used by the GitWeb program, so don’t worry about it.
The config file contains your project specific configuration options, and the info directory keeps a global exclude file for ignored patterns that you don’t want to track in a .gitignore file.
The hooks directory contains your client- or server-side hook scripts, which are discussed in detail in “Git Hooks”.

objects directory stores all the content for your database,
the refs directory stores pointers into commit objects in that data (branches),
the HEAD file points to the branch you currently have checked out,
the index file is where Git stores your staging area information

. Git normally creates a tree by taking the state of your staging area or index and writing a series of tree objects from it.

BLOB OBJECTS:
=============
$ echo 'test content' | git hash-object -w --stdin
(-w to tell git to store in .git/objects and --stdin to tell git to read from standard input else specify a path)
d670460b4b4aece5915caf5c68d12f560a9fe3e4

This is how Git stores the content initially – as a single file per piece of content, named with the SHA-1 checksum of the content and its header.
The subdirectory is named with the first 2 characters of the SHA-1, and the filename is the remaining 38 characters
Use the "cat-file" to read the details of file
Use -t option to know type of object : blob / tree / tag / commits

$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content

TREE OBJECTS:
==============
solves the problem of storing the filename and also allows you to store a group of files together.
All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents.
A single tree object contains one or more tree entries, each of which contains a SHA-1 pointer to a blob or subtree with its associated mode, type, and filename.

COMMIT OBJECTS ->GIT REFS :
===========================
Found at .git/refs
Used to store references to the commits .
update-ref is used to update the commit ID refrences .

git update-ref refs/heads/master 87hli0
git update-ref refs/heads/test cac0ca

So instead of doing "git <command> <cmmit-id>" , you can do "git <command> master" or "git <command> test"
When you run commands like git branch (branchname), Git basically runs that update-ref command to add the SHA-1 of the last commit of the branch you’re on into whatever new reference you want to create.
when you run git branch (branchname), how does Git know the SHA-1 of the last commit? The answer is the HEAD file (.git/HEAD) which is nothing but
(.git/refs/heads/<branch>)
